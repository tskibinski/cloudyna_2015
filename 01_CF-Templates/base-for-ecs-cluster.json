{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Base CloudFormation template: VPC with public and private subnets; RDS instance",

    "Parameters": {
        "DBInstanceClass" : {
            "Description": "RDS instance type",
            "Type": "String",
            "AllowedValues" : [ "db.t2.micro", "db.t2.small", "db.t2.medium" ],
            "Default": "db.t2.micro"
        },
        "DBUser": {
            "Description": "Database admin account name",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "MinLength": "1",
            "MaxLength": "16",
            "NoEcho": "true",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "Description": "Database admin account password",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "MinLength": "8",
            "MaxLength": "41",
            "NoEcho": "true",
            "ConstraintDescription": "must contain only alphanumeric characters."
        }
    },

    "Mappings": {
        "AzMap": {
            "A": { "zone": "eu-west-1a" }, 
            "B": { "zone": "eu-west-1b" }
        },
        "CidrMap": {
            "Any": { "CIDR": "0.0.0.0/0" },
            "VPC" : { "CIDR" : "10.0.10.0/24" },
            "PublicA" : { "CIDR" : "10.0.10.0/26" },
            "PrivateA" : { "CIDR" : "10.0.10.64/26" },
            "PublicB" : { "CIDR" : "10.0.10.128/26" },
            "PrivateB" : { "CIDR" : "10.0.10.192/26" }
        },
        "PortMap": {
            "ping": { "port": "-1" },
            "zero": { "port": "0" },
            "ssh": { "port": "22" },
            "http": { "port": "80" },
            "https": { "port": "443" },
            "middle": { "port": "1024" },
            "mysql" : { "port" : "3306" },
            "http2" : { "port" : "8080" },
            "last": { "port": "65535" }
        }
    },

    "Resources": {
        "InboundICMPNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "VPC", "CIDR" ] },
                "Egress": false, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap",  "ping",  "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "ping", "port" ]}
                },
                "Icmp": {
                    "Code": { "Fn::FindInMap": [ "PortMap", "ping", "port" ] },
                    "Type": { "Fn::FindInMap": [ "PortMap", "ping", "port" ]}
                },
                "Protocol": 1, 
                "RuleAction": "allow", 
                "RuleNumber": 104
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "Inbound1024NetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": false, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap",  "middle",  "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "last", "port" ]}
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 103
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPSNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": false, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap",  "https",  "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "https", "port" ]}
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 102
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundHTTPNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": false, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap",  "http",  "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "http", "port" ]}
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 101
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundSSHNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": false, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap", "ssh", "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "ssh", "port" ]}
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 100
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundICMPNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "VPC", "CIDR" ] },
                "Egress": true, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap", "ping", "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "ping", "port" ]}
                }, 
                "Icmp": {
                    "Code": { "Fn::FindInMap": [ "PortMap", "ping", "port" ] },
                    "Type": { "Fn::FindInMap": [ "PortMap", "ping", "port" ]}
                },
                "Protocol": 1, 
                "RuleAction": "allow", 
                "RuleNumber": 101
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": true, 
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap", "zero", "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "last", "port" ]}
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 100
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundPrivateNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": false, 
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" },
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap", "zero", "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "last", "port" ]}
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 100
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "OutboundPrivateNetworkAclEntry": {
            "Properties": {
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "Egress": true, 
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" }, 
                "PortRange": {
                    "From": { "Fn::FindInMap": [ "PortMap", "zero", "port" ] },
                    "To": { "Fn::FindInMap": [ "PortMap", "last", "port" ] }
                },
                "Protocol": 6, 
                "RuleAction": "allow", 
                "RuleNumber": 100
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateA": {
            "Properties": {
                "AvailabilityZone": { "Fn::FindInMap": [ "AzMap", "A", "zone" ] },
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "PrivateA", "CIDR" ] },
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateASubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" }, 
                "SubnetId": { "Ref": "PrivateA" }
            }, 
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PrivateB": {
            "Properties": {
                "AvailabilityZone": { "Fn::FindInMap": [ "AzMap", "B", "zone" ] },
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "PrivateB", "CIDR" ] },
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::Subnet"
        },
        "PrivateBSubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" }, 
                "SubnetId": { "Ref": "PrivateB" }
            }, 
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PrivateNetworkAcl": {
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PublicA": {
            "Properties": {
                "AvailabilityZone": { "Fn::FindInMap": [ "AzMap", "A", "zone" ] },
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "PublicA", "CIDR" ] },
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::Subnet"
        },
        "PublicASubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "SubnetId": { "Ref": "PublicA" }
            }, 
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicASubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" }, 
                "SubnetId": { "Ref": "PublicA" }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicB": {
            "Properties": {
                "AvailabilityZone": { "Fn::FindInMap": [ "AzMap", "B", "zone" ] },
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "PublicB", "CIDR" ] },
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::Subnet"
        },
        "PublicBSubnetNetworkAclAssociation": {
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }, 
                "SubnetId": { "Ref": "PublicB" }
            }, 
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "PublicBSubnetRouteTableAssociation": {
            "Properties": {
              "RouteTableId": { "Ref": "PublicRouteTable" }, 
              "SubnetId": { "Ref": "PublicB" }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicNetworkAcl": {
            "Properties": { 
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        },
        "PublicRoute": {
            "Properties": {
                "DestinationCidrBlock": { "Fn::FindInMap": [ "CidrMap", "Any", "CIDR" ] },
                "GatewayId": { "Ref": "InternetGateway" }, 
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }, 
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::RouteTable"
        },
        "InternetGateway": { "Type": "AWS::EC2::InternetGateway" }, 
        "VPC": {
            "Properties": { 
                "CidrBlock": { "Fn::FindInMap": [ "CidrMap", "VPC", "CIDR"] },
                "EnableDnsHostnames": true, 
                "EnableDnsSupport": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-vpc"] ] }
                    }
                ]
            }, 
            "Type": "AWS::EC2::VPC"
        },
        "VPCGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": { "Ref": "InternetGateway" }, 
                "VpcId": { "Ref": "VPC" }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "To allow ingress from EC2 instances in this group.",
                "SecurityGroupIngress": [],
                "VpcId": { "Ref" : "VPC" }
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "The database access",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "3306", 
                        "ToPort" : "3306",
                        "SourceSecurityGroupId" : { "Ref" : "InstanceSecurityGroup" }
                    }
                ],
                "VpcId": { "Ref" : "VPC" }
            }
        },
        "RDSSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : "RDS Subnet Group",
                "SubnetIds" : [
                    { "Ref": "PrivateA" },
                    { "Ref": "PrivateB" }
                ]
            }
        },
        "RDSDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "MariaDB",
                "DBName" : { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "DB"] ] },
                "DBSubnetGroupName": { "Ref": "RDSSubnetGroup" }, 
                "MasterUsername": { "Ref": "DBUser" },
                "DBInstanceClass": { "Ref" : "DBInstanceClass" },
                "AllocatedStorage": "5",
                "MasterUserPassword": { "Ref": "DBPassword" },
                "VPCSecurityGroups": [ { "Fn::GetAtt": [ "RDSSecurityGroup", "GroupId" ] } ]
            }
        }
    },

    "Outputs": {
        "VPC": {
            "Description": "Id of the VPC",
            "Value": { "Ref": "VPC" }
        },
        "SubnetsPrv" : {
            "Description": "Id of the Subnets",
            "Value": { "Fn::Join": [ ", ", [ { "Ref": "PrivateA" }, { "Ref": "PrivateB" } ] ] }
        },
        "SubnetsPub" : {
            "Description": "Id of the Subnets",
            "Value": { "Fn::Join": [ ", ", [ { "Ref": "PublicA" }, { "Ref": "PublicB" } ] ] }
        },
        "DBHost" : {
            "Description" : "RDS Connection String",
            "Value" : { "Fn::GetAtt" : [ "RDSDB", "Endpoint.Address" ] }
        },
        "InstanceSecurityGroup" : {
            "Description" : "RDS group",
            "Value" : { "Ref" : "InstanceSecurityGroup" }
        }
    }
}