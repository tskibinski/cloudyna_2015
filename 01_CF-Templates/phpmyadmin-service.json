{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "CloudFormation template for phpMyAdmin ECS service",

    "Parameters" : {
        "ClusterStackName" : {
            "Description" : "Name of Stack this should get outputs from.",
            "MinLength" : 1,
            "Type" : "String"
        },
        "ContainerCpuUnits" : {
            "Description" : "The minimum number of CPU units to reserve for the container",
            "Type" : "Number",
            "Default" : "100"
        },
        "ContainerImage" : {
            "Description" : "The image to use for a container",
            "Type" : "String",
            "Default" : "tskibinski/pma:latest"
        },
        "ContainerMemory" : {
            "Description" : "The number of MiB of memory to reserve for the container",
            "Type" : "Number",
            "Default" : "150"
        },
        "ServiceIsActive" : {
            "Description" : "Will start a seperate service / task that runs cron.",
            "Type" : "String",
            "Default" : "Yes",
            "AllowedValues" : [ "Yes", "No" ]
        },
        "ServiceName" : {
            "Description" : "Name of the application running as ECS service",
            "Type" : "String",
            "Default" : "phpMyAdmin"
        }
    },

    "Conditions" : {
        "isActive" : { "Fn::Equals" : [ { "Ref" : "ServiceIsActive" }, "Yes" ] }
    },

    "Resources" : {
        "LambdaCrossStackFunction" : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile" : "\nvar response = require('cfn-response');\nexports.handler = function(event, context) {\n    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));\n    if (event.RequestType == 'Delete') {\n        response.send(event, context, response.SUCCESS);\n        return;\n    }\n    var stackName = event.ResourceProperties.ReferenceStackName;\n    var responseData = {};\n    if (stackName) {\n        var aws = require('aws-sdk');\n        var cfn = new aws.CloudFormation();\n        cfn.describeStacks({StackName: stackName}, function(err, data) {\n            if (err) {\n                responseData = {Error: 'DescribeStacks call failed'};\n                console.log(responseData.Error + ':\\n', err);\n                response.send(event, context, response.FAILED, responseData);\n            }\n            else {\n                data.Stacks[0].Outputs.forEach(function(output) {\n                    responseData[output.OutputKey] = output.OutputValue;\n                });\n                response.send(event, context, response.SUCCESS, responseData);\n            }\n        });\n    } else {\n        responseData = {Error: 'Stack name not specified'};\n        console.log(responseData.Error);\n        response.send(event, context, response.FAILED, responseData);\n    }\n}\n"
                },
                "Description" : "Lambda function that pulls information from other stacks",
                "Handler" : "index.handler",
                "Role" : { "Fn::GetAtt" : [ "LambdaCrossStackRole", "Arn" ] },
                "Runtime" : "nodejs",
                "Timeout" : "60"
            }
        },
        "LambdaCrossStackRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                  "Statement" : [
                      {
                          "Action" : [ "sts:AssumeRole" ],
                          "Effect" : "Allow",
                          "Principal" : {
                              "Service" : [ "lambda.amazonaws.com" ]
                          }
                      }
                  ],
                  "Version" : "2012-10-17"
                },
                "Path" : "/",
                "Policies" : [
                    {
                        "PolicyDocument" : {
                          "Statement" : [
                              {
                                  "Action" : [ "logs:*" ],
                                  "Effect" : "Allow",
                                  "Resource" : [ "*" ]
                              },
                              {
                                  "Action" : [ "cloudformation:DescribeStacks" ],
                                  "Effect" : "Allow",
                                  "Resource" : [ "*" ]
                              }
                          ],
                          "Version" : "2012-10-17"
                        },
                        "PolicyName" : "ECSInstancePolicy"
                    }
                ]
            }
        },
        "LBRCrossStackReferencer" : {
            "Type" : "Custom::LBRCrossStackReferencer",
            "Properties" : {
                "ReferenceStackName" : { "Ref" : "ClusterStackName" },
                "ServiceToken" : { "Fn::GetAtt" : [ "LambdaCrossStackFunction", "Arn" ] },
                "Version" : "1"
            }
        },
        "Taskdefinition" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ContainerDefinitions" : [
                    {
                        "Name" : { "Ref" : "ServiceName" },
                        "Cpu" : { "Ref" : "ContainerCpuUnits" },
                        "Memory" : { "Ref" : "ContainerMemory" },
                        "Essential" : "true",
                        "Image" : { "Ref" : "ContainerImage" },
                        "PortMappings" : [
                            {
                                "HostPort" : "8080",
                                "ContainerPort" : "80"
                            }
                        ],
                        "Environment" : [
                            {
                                "Name" : "DB_HOST",
                                "Value" : { "Fn::GetAtt" : [ "LBRCrossStackReferencer", "DBHost" ] }
                            }
                        ],
                        "MountPoints" : [
                            {
                                "ContainerPath" : "/var/log/nginx",
                                "SourceVolume" : "pma-logs",
                                "ReadOnly" : false
                            }
                        ]
                    }
                ],
                "Volumes" : [
                    {
                        "Name" : "pma-logs",
                        "Host" : {
                            "SourcePath" : "/var/log/pma"
                        }
                    }
                ]
            }
        },
        "ElasticLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Condition" : "isActive",
            "Properties" : {
                "SecurityGroups" : [
                    { "Fn::GetAtt" : [ "LBRCrossStackReferencer", "ECSELBSecurityGroup" ] }
                ],
                "Scheme" : "internet-facing",
                "Subnets" : [
                   { "Fn::GetAtt" : [ "LBRCrossStackReferencer", "PubSubnetA" ] },
                   { "Fn::GetAtt" : [ "LBRCrossStackReferencer", "PubSubnetB" ] }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort" : "8080",
                        "Protocol" : "HTTP"
                    }
                ],
                "HealthCheck" : {
                    "Target" : "TCP:8080",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "10",
                    "Interval" : "30",
                    "Timeout" : "5"
                },
                "LoadBalancerName" : { "Ref" : "ServiceName" }
            }
        },
        "Service" : {
            "Type" : "AWS::ECS::Service",
            "Condition" : "isActive",
            "Properties" : {
                "Cluster" : { "Fn::GetAtt" : [ "LBRCrossStackReferencer", "ECSCluster" ] },
                "DesiredCount" : "1",
                "LoadBalancers" : [
                    {
                        "ContainerName" : { "Ref" : "ServiceName" },
                        "ContainerPort" : "80",
                        "LoadBalancerName" : { "Ref" : "ElasticLoadBalancer" }
                    }
                ],
                "Role" : { "Fn::GetAtt" : [ "LBRCrossStackReferencer", "ECSServiceRole" ] },
                "TaskDefinition" : { "Ref" : "Taskdefinition" }
            }
        }
    },

    "Outputs" : {
        "ELBAddress" : {
            "Condition" : "isActive",
            "Description" : "Address of the ELB for phpMyAdmin container service",
            "Value" : { "Fn::GetAtt" : ["ElasticLoadBalancer","DNSName"] }
        }
    }
}